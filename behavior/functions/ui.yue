useful_things = assert(SMODS.load_file("useful_things.lua"))()

-- Only exported to test
export _optional_config_wrapper = (config_or_additional_args, ...) -> (...) != nil and {config_or_additional_args, ...} or {{}, config_or_additional_args}
_container_node = (node_type, config_or_nodes, nodes) ->
    config, nodes = unpack _optional_config_wrapper(config_or_nodes, nodes)
    if #nodes == 0
        nodes = nil
    return {
        n: node_type
        config: config
        nodes: nodes
    }

_row_or_column = (config, nodes, node_type, opposite_node_type_function, node_type_name, opposite_node_type_name) ->
    nodes ??= {}
    if nodes.n ~= nil
        nodes = {nodes}
    
    config.align ??= "cm"
    config.padding ??= 0.1
    config.colour  ??= G.C.CLEAR

    if SMODS.Mods.happy_horse_jamboree.config["Debug Mode"] then
        config.padding        = 0.1
        config.outline_colour = node_type_name == "column" and G.C.RED or G.C.BLUE
        config.outline        = 0.2
        config.debug_name ??= "some "..node_type_name
        config.tooltip    ??= {title: config.debug_name, text: {"(contains #{#nodes} nodes)"}}
    

    ok_uh = #nodes
    for node_index=1,ok_uh
        node = nodes[node_index]
        if node.n == node_type then
            nodes[node_index] = opposite_node_type_function({debug_name:"automatic correction "..opposite_node_type_name, padding: 0}, node)
            
    for _, node in pairs(nodes)
        assert(node.n ~= node_type)
    
    return _container_node(node_type, config, nodes)

export row = (config_or_nodes, nodes) -> 
    config, nodes = unpack(_optional_config_wrapper(config_or_nodes, nodes))
    return _row_or_column(config, nodes, G.UIT.R, column, "row", "column")
export column = (config_or_nodes, nodes) -> 
    config, nodes = unpack(_optional_config_wrapper(config_or_nodes, nodes))
    return _row_or_column(config, nodes, G.UIT.C, row, "column", "row")

export text = (config_or_text, text) -> 
    config, text = unpack _optional_config_wrapper(config_or_text, text)
    config = {
        scale: 1
        text: text
        colour: G.C.WHITE
        ...config
    }
    output = row({
        n: G.UIT.T
        config: config
    })
    return output

export hhj_badge = ->
    -- Stolen from SMODS
    -- Would be janky but theoretically better to call SMODS.create_mod_badges directly
    -- ...okay actually no I'm doing that
    badges = {}
    SMODS.create_mod_badges(G.P_CENTERS.j_hhj_horse_base, badges)
    assert(not useful_things.equals(badges, {}))
    return badges[1]

    -- mod = SMODS.happy_horse_jamboree
    -- {
    --     n: G.UIT.R,
    --     config: {
    --         align: "cm"
    --     }
    --     nodes: {
    --         {
    --             n: G.UIT.R, 
    --             config: {
    --                 align: "cm"
    --                 colour: mod.badge_colour or G.C.GREEN
    --                 r: 0.1
    --                 minw: 2
    --                 minh: 0.36
    --                 emboss: 0.05
    --                 padding : 0.03*size
    --             }
    --             nodes: {
    --                 {
    --                     n: G.UIT.B, 
    --                     config: {
    --                         h:0.1
    --                         w:0.03
    --                     }
    --                 }
    --                 {
    --                     n:G.UIT.O, 
    --                     config: {
    --                         object: DynaText({
    --                             string: mod_name or 'ERROR'
    --                             colours: {mod.badge_text_colour or G.C.WHITE}
    --                             float: true
    --                             shadow: true
    --                             offset_y: -0.05
    --                             silent: true
    --                             spacing: 1*scale_fac
    --                             scale: 0.33*size*scale_fac
    --                         })
    --                     }
    --                 }
    --                 {
    --                     n: G.UIT.B, 
    --                     config: {
    --                         h: 0.1
    --                         w: 0.03
    --                     }
    --                 }
    --             }
    --         }
    --     }
    -- }