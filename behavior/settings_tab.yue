import "yue_macros" as {
    $
}
useful_things = assert(SMODS.load_file("useful_things.lua"))()
ui = assert(SMODS.load_file("behavior/functions/ui.lua"))()

for_each = useful_things.for_each
flatten  = useful_things.flatten

config = SMODS.current_mod.config

indent = (string, indent_count=1) -> "    "::rep(indent_count) .. string
indent_all = (list_of_strings, indent_count=1) -> [indent(string, indent_count) for string in *list_of_strings]
print_and_out = (o) ->
    -- print(o)
    o

class ConfigPart
    new: (@name) =>
        @_path_without_self = {}
    as_config_file: => @_config_file_lines() |> table.concat("\n")
        -- useful_things.for_each((s)->s::endswith("{") and s or s..",") |> 
    as_nodes: => error("Not implemented!")
    _lines_start: => "[\"#{@name}\"] = "
    _lines_end: => ","
    _path_with_self: => {...@_path_without_self, @name}
    _config_file_lines: => error("Not implemented!")
    _ref_value: => @name
    _ref: => {ref_table: @_ref_table(), ref_value: @_ref_value()}
    
    _ref_table: => 
        output = config
        for step in *@_path_without_self
            output = output[step]
        return output

class OptionBundle extends ConfigPart
    new: (@name, @options) =>
        super(@name)
        for option in *@options
            option._path_without_self = @_path_with_self()
    
    as_nodes: => {
        ui.text({scale: 0.5}, @name)
        ui.column({scale: 0.75}, @options |> for_each((option)->option::as_nodes()) |> flatten)
    }

    _config_file_lines: => {
            "#{@_lines_start()}{"
            ...$taut[==[
                [
                    option_line |> indent
                    for option_line
                    in *([
                        option::_config_file_lines()
                        for option
                        in *@options
                    ] |> flatten)
                ]
            ]==]
            @_lines_end()
    }

    _lines_end: => "},"

class ConfigRoot extends OptionBundle
    new: (options) => super(nil, options)
    _path_with_self: => {}
    _lines_start: => "return "
    _lines_end: => "}"
    as_nodes: => {ui.row(ui.column(@options |> for_each((option)->option::as_nodes()) |> flatten))}

class Option extends ConfigPart
    new: (@name, @default) => super(@name)
    _config_file_lines: => {"#{@_lines_start()} #{@default}#{@_lines_end()}"}

class BooleanOption extends Option
    as_nodes: => {create_toggle({label: @name, ...@_ref()})}



export config_structure = ConfigRoot
    * OptionBundle "HHJ Aces"
        * BooleanOption("In Main Menu", true)
        * BooleanOption("Everywhere Else", true)
    * BooleanOption("Debug Mode", false)
    


print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
print(config_structure::as_config_file())

SMODS.current_mod.config_tab = -> {
    n: G.UIT.ROOT
    config: {}
    nodes: config_structure::as_nodes()
}

print(config_structure::as_nodes())