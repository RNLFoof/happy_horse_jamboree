assert(SMODS.load_file("libs\\LuaNES\\main.lua"))()

keys = {
    UP: "w"
    LEFT: "a"
    DOWN: "s"
    RIGHT: "d"
    A: "o"
    B: "p"
    SELECT: "i"
    START: "return"
    NOTHING: "4"
}

class Input
    new: (key, frames) =>
        @key = key
        @frames = frames

process_inputs = (card) ->
    input = card.ability.inputs[1]
    if input
        if input.frames == 0
            card.ability.nes.keyreleased(input.key)
            print("release ", input.key)
            card.ability.inputs = [x for x in *card.ability.inputs[2,]]
            process_inputs(card)
        else
            card.ability.nes.keypressed(input.key)
            print("press ", input.key)
            input.frames -= 1
            card.ability.nes.update()
    

pac_man = SMODS.Joker
    key: "pac_man"
    atlas: "atlas_jokers"
    loc_txt:
        name: "Pac-Man"
        text: {
            "Play literally Pac-Man for the NES lmao"
            "Control it by scoring cards"
            "{s:0.8,C:inactive}Number cards hold the direction of their suit"
            "{s:0.8,C:inactive}for that number of frames"
            "{s:0.8,C:inactive}Faces and Aces just press their button"
            "{s:0.8,C:inactive}The game doesn't run when no input is given"
        }
    pos: atlas_jokers_positions["pac_man"]
    set_ability: (card, initial, delay_sprites) =>
        card.ability.nes = spawn_a_nes()
        -- print("boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it boutta load it ")
        card.ability.nes.load({"Mods\\balatro-unknown-mod\\libs\\LuaNES\\roms\\Pac-Man.nes"})
        card.ability.nes.update() -- Update just once to spawn the image
        card.ability.inputs = {
            -- This is NOT an optimal set of inputs 
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.NOTHING, 60),
            Input(keys.A, 1),
            Input(keys.START, 1),
            Input(keys.NOTHING, 60*4.5),
        }
    draw: (card, layer) =>
        card.ability.nes.draw()
    update: (card, dt) =>
        process_inputs(card)
    generate_ui: (info_queue, card, desc_nodes, specific_vars, full_UI_table) =>
        SMODS.Joker.generate_ui(self, info_queue, card, desc_nodes, specific_vars, full_UI_table)
        
        -- I took a reference screenshot with a somewhat arbitrarily sized red square in it
        -- IDK what the units in the UI *are* but we should be able to figure out what to tell it to get what number of pixels
        -- (We want a section for the game that's *always* the size of an NES screen)
        ref_sizes = {
            red:
                pixels:
                    w: 214
                    h: 200
                stated:
                    w: 240/100
                    h: 224/100
            window:
                pixels:
                    w: 2048
                    h: 1152
            nes:
                pixels:
                    w: 240
                    h: 224
        }
        red_stated_to_pixels_ratio = ref_sizes.red.pixels.w / ref_sizes.red.stated.w
        window_width, window_height = love.graphics.getDimensions()
        window_scale = math.min(
            window_width /  ref_sizes.window.pixels.w,
            window_height / ref_sizes.window.pixels.h,
        )
        request_this_size = {
            w: ref_sizes.red.stated.w * (ref_sizes.nes.pixels.w / ref_sizes.red.pixels.w) / window_scale
            h: ref_sizes.red.stated.h * (ref_sizes.nes.pixels.h / ref_sizes.red.pixels.h) / window_scale
        }
        desc_nodes[] = {{
            n: G.UIT.C
            config: 
                minw: request_this_size.w
                minh: request_this_size.h
                colour: G.C.RED

        }}
        --print(desc_nodes)
        --print(full_UI_table)
        print({
            minw: 240/100
            minh: 224/100
            window_width: window_width
            window_height: window_height
            red_stated_to_pixels_ratio: red_stated_to_pixels_ratio
            request_this_size: request_this_size
            window_scale: window_scale
        })