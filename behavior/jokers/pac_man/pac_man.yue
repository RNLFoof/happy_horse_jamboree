assert(SMODS.load_file("libs\\LuaNES\\main.lua"))()

-- print(love.filesystem.read( "Mods\\balatro-unknown-mod\\behavior\\jokers\\pac_man\\pac_man_screen_summary.fs" ))
-- G.SHADERS["hhj_pac_man_screen_summary"] = love.graphics.newShader("Mods\\balatro-unknown-mod\\behavior\\jokers\\pac_man\\pac_man_screen_summary.fs")
-- print(love.filesystem.read( SMODS.Mods.happy_horse_jamboree.path .. "behavior\\jokers\\pac_man\\pac_man_screen_summary.glsl"))
-- print(love.filesystem.getDirectoryItems( "Mods/balatro-unknown-mod" ))
-- print(love.filesystem.read( "Mods/balatro-unknown-mod/behavior/jokers/pac_man/pac_man_screen_summary.fs"))
-- path = "Mods" .. SMODS.Mods.happy_horse_jamboree.path::gsub("^.+Mods", "") .. "behavior/jokers/pac_man/pac_man_screen_summary.glsl"  -- These *have* to be forward slashes
-- print(path)
-- G.SHADERS["hhj_pac_man_screen_summary"] = love.graphics.newShader(path )

-- It takes about 207 frames to go all the way across the bottom, which spans 19 dots
-- so we want one rank to equal, what, half a dot? that seems about right?
frame_multiplier = math.floor(207 / 19 / 2)

keys = {
    UP: "w"
    LEFT: "a"
    DOWN: "s"
    RIGHT: "d"
    A: "o"
    B: "p"
    SELECT: "i"
    START: "return"
    NOTHING: "4"
}


class Input
    new: (key, frames) =>
        @key = key
        @frames = frames
    
    copy: =>
        Input(@key, @frames)

pretend_youre_drawable = (drawable, and_do_this) ->
    prep_draw(drawable, 1)
    and_do_this()    
    love.graphics.pop()
    
pretend_youre_a_center = (center, and_do_this) ->
    if not center.states.visible then return
    if center.sprite_pos.x ~= center.sprite_pos_copy.x or center.sprite_pos.y ~= center.sprite_pos_copy.y
        center::set_sprite_pos(center.sprite_pos)
    prep_draw(center, 1)
    love.graphics.scale(1/(center.scale.x/center.VT.w), 1/(center.scale.y/center.VT.h))
    love.graphics.setColor(G.BRUTE_OVERLAY or G.C.WHITE)
    and_do_this()

    love.graphics.pop()
    add_to_drawhash(center)
    center::draw_boundingrect()
    if center.shader_tab then love.graphics.setShader()

score_to_chips = (score) -> math.floor(score / 10)

pac_man = SMODS.Joker
    key: "pac_man"

    -- Gets its own atlas because shaders use the entire atlas as the texture, so the provided coordinates aren't normalized within the context of drawing that one card
    -- This needs to be accounted for in the gameplay summary shader, because it needs normalized values within the context of this one card in order to check the right pixels in the gameplay
    -- But, if this one card *is* the whole atlas, then it *is* normalized within the context within the context of that one card 
    atlas: "atlas_single_card"
    pos: atlas_single_card_positions["single_card"]

    loc_txt:
        name: "Pac-Man"
        text: {
            "Play literally Pac-Man for the NES lmao"
            "Control it by scoring cards"
            "{s:0.8,C:inactive}Number cards hold the direction of their suit"
            "{s:0.8,C:inactive}for that number of frames (x#{frame_multiplier})"
            "{s:0.8,C:inactive}Faces and Aces just press their button"
            "{s:0.8,C:inactive}The game doesn't run when no input is given"
            "{C:attention}Score: #1# {}â†’{C:chips} Chips: #2#"
        }
    loc_vars: (info_queue, card) => 
        return vars: {
            card.ability.score,
            score_to_chips(card.ability.score)
        }
    prepare_yourself: (card) =>
        -- This is for things that need to be done both on load and set_ability
        card.doesnt_save = {
            nes: spawn_a_nes()
            inputs: {}
            frames_per_frame: 1
            cover_sprite: Sprite(card.T.x, card.T.y, card.T.w, card.T.h, G.ASSET_ATLAS["hhj_atlas_jokers"], atlas_jokers_positions["pac_man"])
        }
        card.doesnt_save.cover_sprite.states.hover = card.states.hover
        card.doesnt_save.cover_sprite.states.click = card.states.click
        card.doesnt_save.cover_sprite.states.drag =  card.states.drag
        card.doesnt_save.cover_sprite.states.collide.can = false
        card.doesnt_save.cover_sprite::set_role({major: card, role_type: 'Glued', draw_major: card})

        card.doesnt_save.nes.load({SMODS.Mods.happy_horse_jamboree.path .. "libs\\LuaNES\\roms\\Pac-Man.nes"})  -- TODO FUCK
        card.doesnt_save.nes.update() -- Update just once to spawn the image

    load: (card, card_table, other_card) =>
        self::prepare_yourself(card)
        card.doesnt_save.frames_per_frame = 30
        card.doesnt_save.just_reloaded = true
    set_ability: (card, initial, delay_sprites) =>
        self::prepare_yourself(card)
        card.doesnt_save.frames_per_frame = 1
        card.ability.score = 0
        card.ability.input_history = {}

        for input in *{
            -- This is NOT an optimal set of inputs 
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.START, 1),
            Input(keys.NOTHING, 60),
            Input(keys.A, 1),
            Input(keys.START, 1),
            Input(keys.NOTHING, 60*4.5),
        }
            self::add_input(card, input)
            
    draw: (card, layer) =>
        card.doesnt_save.nes.update_image()
        center = card.children.center
        G.debug_size_offset ??= 99.0
        card.ARGS.send_to_shader.debug_size_offset = G.debug_size_offset
        center::draw_shader('hhj_pac_man_screen_summary', nil, card.ARGS.send_to_shader)
        card.doesnt_save.cover_sprite::draw_shader('dissolve', nil, nil, nil, center)

        -- 71 is how wide, in pixels, cards are
        -- if false
        --     screen_dims = {
        --         x: 10
        --         y: 10
        --         w: 51
        --         h: 46
        --     }
        --     screen_size_multiplier_x = 256 / screen_dims.w  -- Dude for some reason making the scale bigger makes the screen smaller? WAK
        --     screen_size_multiplier_y = 240 / screen_dims.h
        --     multiply_your_pixels_by_this_for_movement = G.CARD_W / 71 -- How wide cards are in pixels vs how wide they are in the funny mystery units the game uses
        --     field_multiplication_context(center.scale, "x", screen_size_multiplier_x, ->
        --         field_multiplication_context(center.scale, "y", screen_size_multiplier_y, ->
        --             field_addition_context(center.VT, "x", (screen_dims.x-1) * multiply_your_pixels_by_this_for_movement, -> -- why is it off by 1? probably something to do with how it doesn't seem to fully respect the scale...
        --                 field_addition_context(center.VT, "y", (screen_dims.y) * multiply_your_pixels_by_this_for_movement, ->
        --                     pretend_youre_a_center(center, ->
        --                         love.graphics.setShader( G.SHADERS['dissolve'])
        --                         love.graphics.draw(card.doesnt_save.nes.image, 0, 0)
        --                         love.graphics.setShader()
        --                     )
        --                 )
        --             )
        --         )
        --     )
        
    update: (card, dt) =>
        if card.doesnt_save.just_reloaded and card.ability.input_history
            card.doesnt_save.inputs = [Input.copy(input) for input in *card.ability.input_history]
            card.doesnt_save.just_reloaded = nil

        cpu = card.doesnt_save.nes::get_actual_internal_nes_object().cpu
        
        ram = cpu.ram
        if ram -- Ram doesn't seem to always be loaded right away?
            self::process_inputs(card)

            score = ""
            peek_ram = card.doesnt_save.nes.get_actual_internal_nes_object().cpu::peek_ram
            for address = 0x0070, 0x0075
                digit = peek_ram(address)
                if digit < 10  -- When the game first loads they're all 255 LOL
                    score = tostring(digit) .. score
                
            score ..= "0"
            card.ability.score = tonumber(score)
    generate_ui: (info_queue, card, desc_nodes, specific_vars, full_UI_table) =>
        SMODS.Joker.generate_ui(self, info_queue, card, desc_nodes, specific_vars, full_UI_table)
        
        -- I took a reference screenshot with a somewhat arbitrarily sized red square in it
        -- IDK what the units in the UI *are* but we should be able to figure out what to tell it to get what number of pixels
        -- (We want a section for the game that's *always* the size of an NES screen)
        nes_width = card.doesnt_save.nes.image::getWidth()
        nes_height = card.doesnt_save.nes.image::getHeight()

        ref_sizes = {
            red:
                pixels:
                    w: 214
                    h: 200
                stated:
                    w: 240/100
                    h: 224/100
            window:
                pixels:
                    w: 2048
                    h: 1152
            nes:
                pixels:
                    w: nes_width
                    h: nes_height
        }
        red_stated_to_pixels_ratio = ref_sizes.red.pixels.w / ref_sizes.red.stated.w
        window_width, window_height = love.graphics.getDimensions()
        window_scale = math.min(
            window_width /  ref_sizes.window.pixels.w,
            window_height / ref_sizes.window.pixels.h,
        )
        request_this_size = {
            w: ref_sizes.red.stated.w * (ref_sizes.nes.pixels.w / ref_sizes.red.pixels.w) / window_scale
            h: ref_sizes.red.stated.h * (ref_sizes.nes.pixels.h / ref_sizes.red.pixels.h) / window_scale
        }

        if card.children.h_popup
            pac_man_container = card.children.h_popup::get_UIE_by_ID("pac_man_container")
            card.ability.screen_x = card.children.h_popup.T.x
            card.ability.screen_y = card.children.h_popup.T.y

        wait_can_i_just=Moveable()
        wait_can_i_just.draw = =>
            prep_draw(self, 1)
            screen_x, screen_y = love.graphics.transformPoint(0, 0)
            love.graphics.origin()
            pixel_x, pixel_y = love.graphics.inverseTransformPoint(math.floor(screen_x+0.5), math.floor(screen_y+0.5))
            love.graphics.setColor(1, 1, 1)
            love.graphics.draw(card.doesnt_save.nes.image, pixel_x, pixel_y)
            love.graphics.pop()

        desc_nodes[] = {{
            n: G.UIT.C
            config: 
                id: "pac_man_container"
                minw: request_this_size.w
                minh: request_this_size.h
            nodes: {
                {
                    n: G.UIT.O,
                    config: {
                        object: wait_can_i_just
                    }
                }
            }
        }}

    calculate: (card, context) =>
        if context.joker_main and context.cardarea == G.jokers
            return {
                chips: score_to_chips(card.ability.score)
            }
        elseif context.individual and context.cardarea == G.play
            if context.other_card.ability.effect == 'Stone Card'
                return
            input_to_add = nil
            card_id = context.other_card::get_id()
            input_to_add = switch card_id
                when 14
                    Input(keys.A, 1)
                when 13
                    Input(keys.START, 1)
                when 12
                    Input(keys.SELECT, 1)
                when 11
                    Input(keys.B, 1)
                else
                    switch context.other_card.base.suit
                        when "Spades"
                            Input(keys.UP, card_id*frame_multiplier)
                        when "Hearts"
                            Input(keys.DOWN, card_id*frame_multiplier)
                        when "Diamonds"
                            Input(keys.LEFT, card_id*frame_multiplier)
                        when "Clubs"
                            Input(keys.RIGHT, card_id*frame_multiplier)
                        else
                            nil
            if input_to_add
                G.E_MANAGER::add_event(Event
                    func: ->
                        self::add_input(card, input_to_add)
                        true
                )
    
    add_input: (card, input) =>
        card.doesnt_save.inputs[] = input
        card.ability.input_history[] = input::copy()

    process_inputs: (card) =>
        for _ = 1, card.doesnt_save.frames_per_frame
            input = card.doesnt_save.inputs[1]
            if input
                if input.frames == 0
                    card.doesnt_save.nes.keyreleased(input.key)
                    card.doesnt_save.inputs = [x for x in *card.doesnt_save.inputs[2,]]
                    self::process_inputs(card)
                else
                    card.doesnt_save.nes.keypressed(input.key)
                    input.frames -= 1
                    card.doesnt_save.nes.update()
            else
                card.doesnt_save.frames_per_frame = 1