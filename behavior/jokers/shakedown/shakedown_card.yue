useful_things = assert(SMODS.load_file("useful_things.lua"))()
adjust_add = (rot_amount) -> rot_amount * 2

useful_things.wrap_method(Card, "juice_up", nil, (original_output, scale, rot_amount) =>
    if G.SETTINGS.paused
        return
    if @ability.hhj_in_juice_card_until
        return
    
    for joker in *SMODS.find_card("j_hhj_shakedown", false)
        -- if joker.key == "j_hhj_shakedown"add = scale * rot_amount
        rot_amount = math.abs(rot_amount and rot_amount or 0.16)
        scale = scale and scale*0.4 or 0.11

        add = adjust_add(rot_amount)
        add_unrounded = add
        add = useful_things.round(add, 3)

        adding_cutoff = math.max(
            -- 0.001, -- Too small to show
            0.03,  -- Rotation on card hover
        ) |> adjust_add
        if add <= adding_cutoff or add_unrounded <= adding_cutoff
            return

        args = {}
        draw_layer = -1
        attach_to = UIBox{
            T: {0,0, 0,0},
            config: {
                major:self, 
                draw_layer:draw_layer
                align:"cm"
            },
            definition: 
                {n:G.UIT.ROOT, config: {
                major:self,
                draw_layer: draw_layer
                align: 'cm', minw: (args.cover and args.cover.T.w or 0.001) + (args.cover_padding or 0), minh: (args.cover and args.cover.T.h or 0.001) + (args.cover_padding or 0), padding: 0.03, r: 0.1, emboss: args.emboss, colour: G.C.CLEAR}, nodes:{
                }}, 
        }

        scale_variance = 0.2
        self.childParts2 = Particles(G.CARD_W/2, G.CARD_H/2, 0, 0, {
            timer_type: 'TOTAL',
            timer: 0.01,
            scale: 0.2,
            speed: 3,
            pulse_max: math.max(add * 10, 1),
            max: 0,
            align:"cm"
            lifespan: 5,
            colours: {G.C.CHIPS},
            fill: true,
            attach: attach_to,
            draw_layer: draw_layer
            hhj_config:
                gravity_intensity: 2
                update_initially_until_out_of_starting_range: true
                fixed_scale: {min: 0.2 * (1-scale_variance), max: 0.2 * (1+scale_variance)}
                min_speed: 2
        })
        
        G.E_MANAGER::add_event(Event
            trigger: 'after', 
            delay: 50,
            blocking: false,
            blockable: false,
            func: ->
                attach_to::remove()
                true
        )

        joker.ability.chips += add

        attention_text({
            text: "+#{add}",
            scale: useful_things.lerp(0.1, 0.75, add), 
            hold: 0.4,
            backdrop_colour: G.C.CHIPS,
            align: "cm",
            major: joker,
            offset: {
                x: G.CARD_W * math.random(-5, 5) / 10,
                y: G.CARD_H * math.random(-5, 5) / 10,
            }
        })

        -- 1 is played when money is added or removed
        sound_variant = pseudorandom_element({1}, pseudoseed("stolen_sound")) -- ,2,3,4,5,6,7
        play_sound("hhj_shakedown#{sound_variant}", useful_things.random_float(0.5, 1.5), 0.5)
        print("hhj_shakedown#{sound_variant}")
)