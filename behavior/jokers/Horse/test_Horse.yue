testing = assert(SMODS.load_file("libs\\steamodded_test\\main.lua"))()
useful_things = assert(SMODS.load_file("useful_things.lua"))()

outside_influence = {}

G.steamodded_tests.tests[] = testing.TestBundle("horses", {

    testing.Test("chipschipschips", {
        testing.create_state_steps(),
        -> testing.play_hand({"A"}, {centers: "j_hhj_horse_chipschipschips"}),
        -> testing.assert_hand_scored(11+5+24)
    }),

    testing.Test("chipschipschipsjack on a jack", {
        testing.create_state_steps(),
        -> testing.play_hand({"J"}, {centers: "j_hhj_horse_chipschipschipsjack"}),
        -> testing.assert_hand_scored(10+5+24)
    }),

    testing.Test("chipschipschipsjack not on a jack", {
        testing.create_state_steps(),
        -> testing.play_hand({"T"}, {centers: "j_hhj_horse_chipschipschipsjack"}),
        -> testing.assert_hand_scored(10+5)
    }),

    testing.Test("multmultmult", {
        testing.create_state_steps(),
        -> testing.play_hand({"A"}, {centers: "j_hhj_horse_multmultmult"}),
        -> testing.assert_hand_scored((11+5)*(1+(4*3)))
    }),

    testing.Test("moneymoneymoney", {
        testing.create_state_steps(),
        -> testing.play_hand({"A"}, {centers: {
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",

            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
        }}),
        -> testing.assert_dollars_gt(4)
        -> testing.assert_dollars_lt(4+(3*6))
    }),

    testing.Test("moneymoneymoney with Oops! All 6s", {
        testing.create_state_steps(),
        -> testing.play_hand({"A"}, {centers: {
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",

            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",

            "j_oops",
        }}),
        -> testing.assert_dollars(4+(3*6))
    }),

    testing.TestBundle("judgement_bug", {
        testing.Test("control", {
            ...testing.create_state_steps(),
            -> 
                outside_influence.end = useful_things.multi_field_replace_context_manual_end({
                    {G.P_JOKER_RARITY_POOLS, 1, {G.P_CENTERS["j_joker"]}},
                    {G.P_JOKER_RARITY_POOLS, 2, {G.P_CENTERS["j_joker"]}},
                    {G.P_JOKER_RARITY_POOLS, 3, {G.P_CENTERS["j_joker"]}},
                })
            -> 
                judgement = SMODS.add_card({set: "Tarot", key: "c_judgement"})
                judgement::use_consumeable(judgement.area)
                print(G.P_JOKER_RARITY_POOLS[1])
            -> 
                outside_influence.end()
            ->
                testing.assert_eq(G.jokers.cards[1].config.center.key, "j_joker")
        }),

        testing.Test("base_horse", {
            ...testing.create_state_steps(),
            -> 
                outside_influence.end = useful_things.multi_field_replace_context_manual_end({
                    {G.P_JOKER_RARITY_POOLS, 1, {G.P_CENTERS["j_hhj_horse_base"], G.P_CENTERS["j_hhj_horse_chipschipschips"]}},
                    {G.P_JOKER_RARITY_POOLS, 2, {G.P_CENTERS["j_hhj_horse_base"], G.P_CENTERS["j_hhj_horse_chipschipschips"]}},
                    {G.P_JOKER_RARITY_POOLS, 3, {G.P_CENTERS["j_hhj_horse_base"], G.P_CENTERS["j_hhj_horse_chipschipschips"]}},
                })
            -> 
                judgement = SMODS.add_card({set: "Tarot", key: "c_judgement"})
                judgement::use_consumeable(judgement.area)
            -> 
                outside_influence.end()
            ->
                testing.assert_eq(G.jokers.cards[1].config.center.key, "j_hhj_horse_chipschipschips")
        }),
    }),

    testing.Test("base_horse_replacement", {
        ...testing.create_state_steps(),
        -> testing.add_centers({"j_hhj_horse_base"})
        -> assert(G.jokers.cards[1].is_horse)
        -> testing.assert_ne(G.jokers.cards[1].config.center.key, "j_hhj_horse_base")
    }),

    testing.Test("horse_negatives", {
        ...testing.create_state_steps(),
        -> testing.add_centers(["j_hhj_horse_base" for i = 1,6])
        -> testing.assert_eq(#[joker for joker in *G.jokers.cards when joker.edition?.negative], 5)
    }),

})
