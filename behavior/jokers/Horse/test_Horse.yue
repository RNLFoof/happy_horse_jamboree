testing = assert(SMODS.load_file("libs\\steamodded_test\\main.lua"))()
useful_things = assert(SMODS.load_file("useful_things.lua"))()

G.steamodded_tests.tests[] = testing.TestBundle("horses", {

    testing.Test("chipschipschips", {
        testing.create_state_steps(),
        -> testing.play_hand({"A"}, {centers: "j_hhj_horse_chipschipschips"}),
        -> testing.assert_hand_scored(11+5+24)
    }),

    testing.Test("chipschipschipsjack on a jack", {
        testing.create_state_steps(),
        -> testing.play_hand({"J"}, {centers: "j_hhj_horse_chipschipschipsjack"}),
        -> testing.assert_hand_scored(10+5+24)
    }),

    testing.Test("chipschipschipsjack not on a jack", {
        testing.create_state_steps(),
        -> testing.play_hand({"T"}, {centers: "j_hhj_horse_chipschipschipsjack"}),
        -> testing.assert_hand_scored(10+5)
    }),

    testing.Test("multmultmult", {
        testing.create_state_steps(),
        -> testing.play_hand({"A"}, {centers: "j_hhj_horse_multmultmult"}),
        -> testing.assert_hand_scored((11+5)*(1+(4*3)))
    }),

    testing.Test("moneymoneymoney", {
        testing.create_state_steps(),
        -> testing.play_hand({"A"}, {centers: {
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",

            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
        }}),
        -> testing.assert_dollars_gt(4)
        -> testing.assert_dollars_lt(4+(3*6))
    }),

    testing.Test("moneymoneymoney with Oops! All 6s", {
        testing.create_state_steps(),
        -> testing.play_hand({"A"}, {centers: {
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",

            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",
            "j_hhj_horse_moneymoneymoney",

            "j_oops",
        }}),
        -> testing.assert_dollars(4+(3*6))
    }),

    testing.Test("judgement_test_for_the_next_test", {
        ...testing.create_state_steps(),
        -> 
            useful_things.pool_filter_context(((center) -> center.key=="j_hhj_horse_base"), nil, ->
                G.P_JOKER_RARITY_POOLS[1] = {G.P_CENTERS["j_joker"]}
                G.P_JOKER_RARITY_POOLS[2] = {G.P_CENTERS["j_joker"]}
                G.P_JOKER_RARITY_POOLS[3] = {G.P_CENTERS["j_joker"]}
                judgement = SMODS.create_card({set: "Tarot", key: "c_judgement"})
                judgement::use_consumeable(judgement.area)
            )
        -> false
    }),

    testing.Test("judgement_spawning_base_horse", {
        ...testing.create_state_steps(),
        -> 
            useful_things.pool_filter_context(((center) -> center.key=="j_hhj_horse_base"), nil, ->
                G.P_JOKER_RARITY_POOLS[1] = {G.P_CENTERS["j_hhj_horse_base"], G.P_CENTERS["j_hhj_horse_chipschipschips"]}
                G.P_JOKER_RARITY_POOLS[2] = {G.P_CENTERS["j_hhj_horse_base"], G.P_CENTERS["j_hhj_horse_chipschipschips"]}
                G.P_JOKER_RARITY_POOLS[3] = {G.P_CENTERS["j_hhj_horse_base"], G.P_CENTERS["j_hhj_horse_chipschipschips"]}
                judgement = SMODS.create_card({set: "Tarot", key: "c_judgement"})
                judgement::use_consumeable(judgement.area)
            )
        -> false
    }),

})
