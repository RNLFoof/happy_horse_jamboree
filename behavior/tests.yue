testing = assert(SMODS.load_file("libs\\steamodded_test\\main.lua"))()
useful_things = assert(SMODS.load_file("useful_things.lua"))()

G.steamodded_tests.tests[] = testing.TestBundle("useful_things", {

    testing.Test("wrap_method", {
        -> 
            buildup = {}
            obj = {
                fun: ->
                    buildup[] = "middle"
            }
            useful_things.wrap_method(obj, "fun", (-> buildup[] = "before"), (-> buildup[] = "after"))
            obj.fun()
            testing.assert_eq(table.concat(buildup, "_"), "before_middle_after")
    }),

    testing.Test("lerp", {
        -> 
            testing.assert_eq(useful_things.lerp(0, 1, 0  ), 0)
            testing.assert_eq(useful_things.lerp(0, 1, 1  ), 1)
            testing.assert_eq(useful_things.lerp(0, 8, 1  ), 8)
            testing.assert_eq(useful_things.lerp(0, 8, 0.5), 4)
            testing.assert_eq(useful_things.lerp(4, 8, 0.5), 6)
    }),

    testing.Test("normalize", {
        -> 
            testing.assert_eq(useful_things.normalize(0, 0,   1), 0  )
            testing.assert_eq(useful_things.normalize(0, 1,   1), 1  )
            testing.assert_eq(useful_things.normalize(0, 0.5, 1), 0.5)
            testing.assert_eq(useful_things.normalize(0, 2,   4), 0.5)
            testing.assert_eq(useful_things.normalize(1, 3,   5), 0.5)
            testing.assert_eq(useful_things.normalize(1, 1,   5), 0  )
            testing.assert_eq(useful_things.normalize(1, 5,   5), 1  )
    }),

    testing.Test("field_replace_context", {
        ->
            object = {"a"}
            testing.assert_eq(object[1], "a")
            useful_things.field_replace_context(object, 1, "b", ->
                testing.assert_eq(object[1], "b")
            )
            testing.assert_eq(object[1], "a")
    })

    testing.Test("field_replace_context_with_error", {
        ->
            object = {"a"}
            testing.assert_eq(object[1], "a")
            original_error_message = ":)"
            response, error_message = pcall(() ->
                useful_things.field_replace_context(object, 1, "b", ->
                    testing.assert_eq(object[1], "b")
                    error(original_error_message)
                )
            )
            testing.assert_eq(response, false)
            assert(error_message::endswith(original_error_message))
            testing.assert_eq(object[1], "a")
    })

    testing.Test("multi_field_replace_context", {
        ->
            object = {"a", "b", "c"}
            testing.assert_eq(object[1], "a")
            testing.assert_eq(object[2], "b")
            testing.assert_eq(object[3], "c")
            useful_things.multi_field_replace_context({
                {object, 1, "d"},
                {object, 2, "e"},
                {object, 3, "f"},
            }, ->
                testing.assert_eq(object[1], "d")
                testing.assert_eq(object[2], "e")
                testing.assert_eq(object[3], "f")
            )
            testing.assert_eq(object[1], "a")
            testing.assert_eq(object[2], "b")
            testing.assert_eq(object[3], "c")
    })

    testing.Test("judgement_after_filtering", {
        ...testing.create_state_steps(),
        -> 
            judgement = SMODS.create_card({set: "Tarot", key: "c_judgement"})
            judgement::use_consumeable(judgement.area)
            true
    }),

})