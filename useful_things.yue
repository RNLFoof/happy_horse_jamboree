import "yue_macros" as {
    $
}

export config = SMODS.current_mod.config

-- Be careful with this, if you don't call the original mnethod manually, it won't be called at all
export wrap_method_with_manual_calling = (class_, method_name, do_this) ->
    if class_ == nil then error("CLASS IS NIL :(")
    if class_[method_name] == nil then error("METHOD IS NIL :(")
    function_wrapped_at = debug.getinfo(2)  -- This is so that it appears in the debug info. hard to track down otherwise
    original_method = class_[method_name]
    class_[method_name] = (...) ->
        will_it_let_me_do_this = "Wrap defined at #{function_wrapped_at.source}:#{function_wrapped_at.linedefined}."
        args = {...}
        do_this(original_method, args)


export wrap_method = (class_, method_name, before = (-> nil), after = ((original_outputs)=>original_outputs)) ->
    function_wrapped_at = debug.getinfo(2)  -- This is so that it appears in the debug info. hard to track down otherwise
    wrap_method_with_manual_calling(class_, method_name, (original_method, args) ->
        will_it_let_me_do_this = "Wrap defined at #{function_wrapped_at.source}:#{function_wrapped_at.linedefined}."
        before(unpack args)
        original_outputs = {original_method(unpack args)}
        return after(
            args[1],  -- self, which is always first
            original_outputs,  -- This feels like it should be last, but it has to go here because the original args could have ended in ..., which prevents one last arg here 
            unpack [x for x in *args[2,]]
        )
    )


export table_is_list = (table) -> #([x for x in pairs(table)]) == #table

export flatten = (list) ->
    output = {}
    for item in *list
        if type(item) == "table" and table_is_list(item)
            output = {...output, ...flatten(item)}
        else
            output[] = item
    return output

export for_each = (list, callable) -> [callable(item) for item in *list]

_traverse_default_key_not_found = (object, path, output_thus_far, step_index) ->
    entire_path = "ORIGINAL_OBJECT"
    path_until_error = "uhhhhhhhhhhhhh you probably shouldn't be seeing this :]"
    for internal_step_index, step in ipairs(path)
        if type(step) == "number"
            entire_path += "[#{step}]"
        else
            entire_path += ".#{step}"
        if internal_step_index < step_index
            path_until_error = entire_path
    error("Unable to follow the path of #{entire_path}: #{path_until_error} is #{SMODS.inspect(output_thus_far)}", 3)

export traverse = (object, path, on_key_not_found=_traverse_default_key_not_found) -> 
    output = object
    for step_index, step in ipairs(path)
        if output[step] == nil
            return on_key_not_found(object, path, output, step_index)
        output = output[step]
    return output

export traverse_allowing_final_nil = (object, path) ->
    traverse(object, path, (object, path, output_thus_far, step_index) ->
        if step_index == #path
            return nil
        else
            _traverse_default_key_not_found(object, path, output_thus_far, step_index)
    )

export traverse_blindly = (object, path) -> traverse(object, path, -> nil)

export round = (num, numDecimalPlaces) ->
    mult = 10^(numDecimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult

export lerp = (some_value, some_other_value, how_far) ->
    -- Ideally `0 <= how_far <= 1` but you do you man
    return some_value + (some_other_value - some_value) * how_far

export random_float = (min, max) ->
    assert(min <= max)
    return lerp(min, max, math.random())

export normalize = (min, mid, max) ->
    assert(min <= mid <= max)
    delta = max-min
    adjusted_mid = mid - min
    return adjusted_mid / delta

field_replace_context_halves = (object, field_name, value) ->
    original_value = object[field_name]
    start_context = () -> object[field_name] = value
    end_context = () -> object[field_name] = original_value
    return start_context, end_context

export field_replace_context_manual_end = (object, field_name, value) ->
    start_context, end_context = field_replace_context_halves(object, field_name, value)
    start_context()
    return end_context

export multi_field_replace_context_manual_end = (list_of_object_field_values) ->
    endings = [field_replace_context_manual_end(unpack object_field_value) for object_field_value in *list_of_object_field_values]
    return () -> [ending() for ending in *endings]

safely_do_this_and_end = (do_this, end_context) ->
    output = nil
    result, error_message = pcall(()-> output = do_this()) -- Done in a pcall so that even if the entire thing is wrapped in a pcall it'll still reset the value at the end
    end_context()
    if not result
        error(error_message)
    return output

export field_replace_context = (object, field_name, value, do_this = ->) ->
    end_context = field_replace_context_manual_end(object, field_name, value)
    return safely_do_this_and_end(do_this, end_context)

export multi_field_replace_context = (list_of_object_field_values, do_this = ->) ->
    end_context = multi_field_replace_context_manual_end(list_of_object_field_values)
    return safely_do_this_and_end(do_this, end_context)
    -- object, field_name, value = unpack list_of_object_field_values[1]
    -- remaining_object_field_values = [x for x in *list_of_object_field_values[2,]]
    -- field_replace_context(object, field_name, value, ->
    --     if #remaining_object_field_values == 0
    --         do_this()
    --     else
    --         multi_field_replace_context(remaining_object_field_values, do_this)
    -- )

export field_operation_context = (object, field_name, operation, do_this = ->) ->
    field_replace_context(object, field_name, operation(object[field_name]), do_this)

export field_addition_context = (object, field_name, the_guy_you_add_idk, do_this = ->) ->
    field_operation_context(object, field_name, ((x) -> x+the_guy_you_add_idk), do_this)

export field_multiplication_context = (object, field_name, multiplier, do_this = ->) ->
    field_operation_context(object, field_name, ((x) -> x*multiplier), do_this)

export pool_filter_context_manual_end = (filter, fallback, do_this = ->) ->
    return safely_do_this_and_end(
        multi_field_replace_context_manual_end({
            {G, "hhj_pool_filter", filter},
            {G, "hhj_pool_fallback", fallback},
        }),
    do_this)

export pool_filter_context = (filter, fallback, do_this = ->) ->
    return field_replace_context(G, "hhj_pool_filter", filter, ->
        return field_replace_context(G, "hhj_pool_fallback", fallback, ->
            return do_this()
        )
    )

export filtered_pool = (pool, filter=nil, fallback=nil) ->
    original_pool = pool
    if not filter
        return original_pool
    unavalibilities = 0
    its_unavaliable = () ->
        unavalibilities += 1
        "UNAVAILABLE"
    
    new_pool = $taut[==[
        [
            (
                item != "UNAVAILABLE"
                and filter(G.P_CENTERS[item])
            )
            and item
            or its_unavaliable()
            for item
            in *original_pool
        ]
    ]==]

    -- Without accounting for this, the vanilla behavior just infinite loops and crashes
    if unavalibilities >= #new_pool
        if fallback == "UNFILTERED"
            return original_pool
        else if fallback
            return {fallback}
        else
            filter_info = debug.getinfo(filter)
            error("The filter(defined at #{filter_info.source}) resulted in no valid centers, and a fallback wasn't provided :(")
    
    return new_pool

wrap_method(_G, "get_current_pool", nil, (original_outputs, args) =>
    pool, pool_key = unpack original_outputs
    pool = filtered_pool(pool, G.hhj_pool_filter, G.hhj_pool_fallback)
    return pool, pool_key
)

--- New kwargs:
--- @field filter? fun(center: SMODS.Center): boolean Function called to determine if a center is allowed to be chosen or not
--- @field fallback? string Center key to be used if every center is filtered out, set to "UNFILTERED" to make the fallback ignoring the filter entirely
export create_card_filtered = (kwargs={}) ->
    return pool_filter_context(kwargs.filter, kwargs.fallback, ->
        return SMODS.create_card(kwargs)
    )

    -- Pretty sure this function called with a filter that approvs everything would produce different RNG results than plain old SMODS.create_card
    -- Which like
    -- Kind of sucks but also doesn't matter at all (probably)

    -- Works by putting everything from a pool that matches a given filter function (in kwargs.filter) into a new pool, which is then pulled from
    -- kwargs.filter ??= (card) -> true
    -- temp_pool = "hhj_temp_filtered_pool"
    -- G.P_CENTER_POOLS[temp_pool] = {}

    -- -- Because kwargs.set is going to be replaced for the final pull, everything that *would* be handled based on kwargs.set in create_card needs to be handled here
    -- -- Also kwargs.set is _type in the Balatro source
    -- if kwargs.soulable
    --     error("kwargs.soulable isn't supported bc it's unnecessary at time of writing")
    -- if kwargs.set == 'Base'
    --     kwargs.key = 'c_base'
    
    -- -- Populate temp pool
    -- pool, pool_key = get_current_pool(kwargs.set, kwargs.rarity, kwargs.legendary, kwargs.key_append)
    -- for center_key in *pool
    --     print(center_key)
    --     if kwargs.filter(G.P_CENTERS[center_key])
    --         G.P_CENTER_POOLS[temp_pool][] = center_key
    -- print(G.P_CENTER_POOLS[temp_pool])
    
    -- kwargs.set = temp_pool
    -- output = SMODS.create_card(kwargs)
    -- -- G.P_CENTER_POOLS[temp_pool] = nil
    -- return output

export pseudorandom_center_key = (pool, pool_key="") ->
    -- Stolen from create_card in common_events.lua
    center = pseudorandom_element(pool, pseudoseed(pool_key))
    local it = 1
    while center == 'UNAVAILABLE' do
        it = it + 1
        center = pseudorandom_element(pool, pseudoseed(pool_key..'_resample'..it))
    return center

export pseudorandom_center = (pool, pool_key="") -> G.P_CENTERS[pseudorandom_center_key(pool, pool_key)]